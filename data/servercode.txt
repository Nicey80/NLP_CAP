server <- function(input, output) {
  
    init <- 0
    
  # load ngram data add progress indicator
  ngramvals <- reactiveValues()
  
  observeEvent(init ==0,{
      withProgress(message = 'Loading Dictionaries', value = 0, {
  
          incProgress(0/3, detail = paste("Loading part", 1))        
  ngramvals$four <- read_csv('data/4gram.csv')
  incProgress(1/3, detail = paste("Loading part", 2))
  
  ngramvals$three <- read_csv('data/3gram.csv')
  incProgress(2/3, detail = paste("Loading part", 3))
  ngramvals$two <- read_csv('data/2gram.csv')
  #incProgress(3/3, detail = paste("Doing part", 3))
  init <- 1
      })
  })
  
  fourg_test <- function(inputstring){
      inputsplit <- strsplit(inputstring, split=" ")
      out.str <- unlist(inputsplit)
      
      l <- length(out.str)
      w1 <- out.str[l-2]
      w2 <- out.str[l-1]
      w3 <- out.str[l]
      
      tgtdf <- ngramvals$four
      #str(tgtdf)
      out.df <- tgtdf %>%
          filter(word1==w1, word2==w2, word3==w3) %>%
          arrange(desc(n))%>%
          filter(row_number() <=3) %>%
          select(word4) %>%
          as_tibble()
  }
  
  threeg_test <- function(inputstring){
      inputsplit <- strsplit(inputstring, split=" ")
      out.str <- unlist(inputsplit)
      
      l <- length(out.str)
      w1 <- out.str[l-1]
      w2 <- out.str[l]
      
      tgtdf <- ngramvals$three
      #str(tgtdf)
      out.df <- tgtdf %>%
          filter(word1==w1, word2==w2) %>%
          arrange(desc(n))%>%
          filter(row_number() <=3) %>%
          select(word3)%>%
          as_tibble()
  }
  
  
  twog_test <- function(inputstring){
      inputsplit <- strsplit(inputstring, split=" ")
      out.str <- unlist(inputsplit)
      
      l <- length(out.str)
      w1 <- out.str[l]
      
      tgtdf <- ngramvals$two
      #str(tgtdf)
      out.df <- tgtdf %>%
          filter(word1==w1) %>%
          arrange(desc(n))%>%
          filter(row_number() <=3) %>%
          select(word2)%>%
          as_tibble()
  }
  
  model_wrapper <- function(inputstring){
      OutData <- fourg_test(inptoks())
      str(OutData)
      length(OutData)
      if(nrow(OutData)==0){
          OutData <- threeg_test(inptoks())
          str(OutData)
      }

      if(nrow(OutData)==0){
          OutData <- twog_test(inptoks())
          str(OutData)
      }

      if(nrow(OutData)==0){
          OutData <- data.frame(x="The specified phrase is not contained within the loaded dictionaries")
      }

      OutData
  }
  
  
  
  output$Wordcount <- renderText({
    nwords <- stri_count_words(input$ti)
    
    nwords
    
  })
  output$titoks <- renderText({
      nwords <- stri_count_words(input$ti)
      if (nwords <2 | length(input$ti==0))
          return()
      else if (nwords<3){
          titokens <- unlist(unnest_tokens(as_data_frame(input$ti),
                                           input = value, output = gram, token='ngrams', n=2))
      }
      else{
          titokens <- unlist(unnest_tokens(as_data_frame(input$ti),
                                           input = value, output = gram, token='ngrams', n=3))
          ln <- length(titokens)
          titokens[ln]
      }
      
  })
  
  inptoks <- reactive({
      nwords <- stri_count_words(input$ti)
      if (nwords <2)
          return()
      else if (nwords<3){
          titokens <- unlist(unnest_tokens(as_data_frame(input$ti),
                                           input = value, output = gram, token='ngrams', n=2))
          outtoks <- titokens
      }
      else{
          titokens <- unlist(unnest_tokens(as_data_frame(input$ti),
                                           input = value, output = gram, token='ngrams', n=3))
          ln <- length(titokens)
          outtoks <- titokens[ln]
      }
      outtoks
  })
  output$textpred <- renderTable({
      
      nwords <- stri_count_words(input$ti)
      if (nwords <3)# | length(input$ti==0))
          return()
      
      OutData <- model_wrapper(inptoks())
      
      t(OutData)
      #head(ngramvals$four,10)
      
      #as.character(inptoks())
      
  }, colnames = FALSE, bordered = TRUE, width='90%', striped = TRUE)
  
  output$downloadData <- downloadHandler(
      filename="grammodel.csv",
      content = function(file){
          file.copy("./data/grammodels.zip",file)
      }
      
  )
  
  output$downloadCode <- downloadHandler(
      filename = "code.txt"
      content = function(file){
          file.copy("./data/grammodels.zip",file)
      }
  )
  
  
}