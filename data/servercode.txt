server <- function(input, output, session) {
  
    init <- 0
    
  # load ngram data add progress indicator
  ngramvals <- reactiveValues()
  
  observeEvent(init ==0,{
      withProgress(message = 'Loading Dictionaries', value = 0, {
  
          incProgress(0/3, detail = paste("Loading part", 1))        
  ngramvals$four <- fread('data/4gram_sngl.csv')
  setkey(ngramvals$four,word)
  incProgress(1/3, detail = paste("Loading part", 2))
  
  ngramvals$three <- fread('data/3gram_sngl.csv')
  setkey(ngramvals$three,word)
  incProgress(2/3, detail = paste("Loading part", 3))
  ngramvals$two <- fread('data/2gram.csv')
  setkey(ngramvals$two,word1)
  #incProgress(3/3, detail = paste("Doing part", 3))
  init <- 1
  
  
      })
  })
  
  fourg_test <- function(inputstring){
      inputsplit <- strsplit(inputstring, split=" ")
      out.str <- unlist(inputsplit)
      
      l <- length(out.str)
      w1 <- out.str[l-2]
      w2 <- out.str[l-1]
      w3 <- out.str[l]
      
      wd <- paste(w1,w2,w3,sep="_")
      
      tgtdf <- ngramvals$four
      str(tgtdf)
      out.df <- tgtdf[wd,nomatch=0][order(-n)][,word4]
      tl <- length(out.df)
      if(tl>=3){
          out.df[1:3]
      }else if(tl==1|tl==2){
          out.df[1:tl]
      }else {out.df}
      
              # filter(word==wd) %>%
          # arrange(desc(n))%>%
          # filter(row_number() <=3) %>%
          # select(word4) %>%
          # as_tibble()
  }
  
  threeg_test <- function(inputstring){
      inputsplit <- strsplit(inputstring, split=" ")
      out.str <- unlist(inputsplit)
      
      l <- length(out.str)
      w1 <- out.str[l-1]
      w2 <- out.str[l]
      
      wd <- paste(w1,w2,sep="_")
      
      tgtdf <- ngramvals$three
      #str(tgtdf)
      out.df <- tgtdf[wd,nomatch=0][order(-n)][,word3]
      tl <- length(out.df)
      if(tl>=3){
          out.df[1:3]
      }else if(tl==1|tl==2){
          out.df[1:tl]
      }else {out.df}
     
          # tgtdf %>%
          # filter(word==wd) %>%
          # arrange(desc(n))%>%
          # filter(row_number() <=3) %>%
          # select(word3)%>%
          # as_tibble()
  }
  
  
  twog_test <- function(inputstring){
      inputsplit <- strsplit(inputstring, split=" ")
      out.str <- unlist(inputsplit)
      
      l <- length(out.str)
      w1 <- out.str[l]
      
      tgtdf <- ngramvals$two
      #str(tgtdf)
      out.df <- tgtdf[w1,nomatch=0][order(-n)][,word2][1:3]
      #
      
      tl <- length(out.df)
      if(tl>=3){
          out.df[1:3]
      }else if(tl==1|tl==2){
          out.df[1:tl]
      }else {out.df}
      
      #
      
      
          # filter(word1==w1) %>%
          # arrange(desc(n))%>%
          # filter(row_number() <=3) %>%
          # select(word2)%>%
          # as_tibble()
  }
  
  model_wrapper <- function(inputstring){
      OutData <- fourg_test(inptoks())
      #str(OutData)
      #length(OutData)
      if(length(OutData)==0){
          OutData <- threeg_test(inptoks())
          #str(OutData)
      }

      if(length(OutData)==0){
          OutData <- twog_test(inptoks())
          #str(OutData)
      }

      if(length(OutData)==0){
          OutData <- data.frame(x="The specified phrase is not contained within the loaded dictionaries")
      }

      OutData
  }
  
  
  
  # output$Wordcount <- renderText({
  #   nwords <- stri_count_words(input$ti)
  #   
  #   nwords
  #   
  # })
  # output$titoks <- renderText({
  #     nwords <- stri_count_words(input$ti)
  #     if (nwords <2 | length(input$ti==0))
  #         return()
  #     else if (nwords<3){
  #         titokens <- unlist(unnest_tokens(as_data_frame(input$ti),
  #                                          input = value, output = gram, token='ngrams', n=2))
  #     }
  #     else{
  #         titokens <- unlist(unnest_tokens(as_data_frame(input$ti),
  #                                          input = value, output = gram, token='ngrams', n=3))
  #         ln <- length(titokens)
  #         titokens[ln]
  #     }
  #     
  # })
  
  inptoks <- reactive({
      nwords <- stri_count_words(input$ti)
      if (nwords <2)
          return()
      else if (nwords<3){
          titokens <- unlist(unnest_tokens(as_data_frame(input$ti),
                                           input = value, output = gram, token='ngrams', n=2))
          outtoks <- titokens
      }
      else{
          titokens <- unlist(unnest_tokens(as_data_frame(input$ti),
                                           input = value, output = gram, token='ngrams', n=3))
          ln <- length(titokens)
          outtoks <- titokens[ln]
      }
      outtoks
  })
  # output$textpred <- renderTable({
  #     
  #     nwords <- stri_count_words(input$ti)
  #     if (nwords <3)# | length(input$ti==0))
  #         return()
  #     
  #     OutData <- model_wrapper(inptoks())
  #     
  #     t(OutData)
  #     #head(ngramvals$four,10)
  #     
  #     #as.character(inptoks())
  #     
  # }, colnames = FALSE, bordered = TRUE, width='90%', striped = TRUE)
  

  output$downloadData <- downloadHandler(
      filename="grammodel.zip",
      content = function(file){
          file.copy("./data/grammodels.zip",file)
      }
      
  )
  
  output$downloadCode <- downloadHandler(
      filename = "code.txt",
      content = function(file){
          file.copy("./data/servercode.txt",file)
      }
  )
  
  observeEvent(input$W1,{
      x <- input$ti
      OutData <- model_wrapper(inptoks())
      selected_word <- OutData[1]
      updateTextInput(session,'ti',value=paste(x,selected_word))

  })
  
  observeEvent(input$W2,{
      x <- input$ti
      OutData <- model_wrapper(inptoks())
      selected_word <- OutData[2]
      updateTextInput(session,'ti',value=paste(x,selected_word))
      
  })
  
  observeEvent(input$W3,{
      x <- input$ti
      OutData <- model_wrapper(inptoks())
      selected_word <- OutData[3]
      updateTextInput(session,'ti',value=paste(x,selected_word))
      
  })
  
  output$butts <- renderUI({
      nwords <- stri_count_words(input$ti)
      if (nwords <3)# | length(input$ti==0))
          return()
      
      OutData <- model_wrapper(inptoks())
      #print(OutData)
      
      if (length(OutData)==3){
          l1 <- OutData[1]
          l2 <- OutData[2]
          l3 <- OutData[3]
          
          tagList(
            column(width=11,      
                actionButton("W1",l1, width='33%', icon = icon('angle-double-up')),
                actionButton("W2",l2, width='33%', icon = icon('angle-double-up')),
                actionButton("W3",l3, width='33%', icon = icon('angle-double-up')))
                )
      } else if (length(OutData)==2){
          l1 <- OutData[1]
          l2 <- OutData[2]
          #l3 <- OutData[3,1]
          
          tagList(
              column(width=11,      
              actionButton("W1",l1, width='49%', icon = icon('angle-double-up')),
              actionButton("W2",l2, width='49%', icon = icon('angle-double-up')))#,
              #actionButton("W3",l3, width='33%', icon = icon('angle-double-up')))
          )
      } else if (length(OutData)==1 & OutData[1]!='The specified phrase is not contained within the loaded dictionaries'){
          l1 <- OutData[1]
          #l2 <- OutData[2,1]
          #l3 <- OutData[3,1]
          
          tagList(
              column(width=11,      
                     actionButton("W1",l1, width='98%', icon = icon('angle-double-up')))#,
                     #actionButton("W2",l2, width='50%', icon = icon('angle-double-up')))#,
              #actionButton("W3",l3, width='33%', icon = icon('angle-double-up')))
          )
      } else {
          tagList(
              column(width=11,
                     actionButton("W4","The specified phrase is not contained within the loaded dictionaries",
                     width='98%', icon=icon('ban',class='glyphred')))
          )
      }
      
  })
  
  session$onSessionEnded(stopApp)
}